plugins {
    id 'java'
    id 'org.springframework.boot' version '2.3.1.RELEASE'
    id "io.freefair.lombok" version "5.1.0"
    id "checkstyle"
    id "com.github.spotbugs" version "4.4.4"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'checkstyle'
apply plugin: "com.github.spotbugs"



repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web:2.3.1.RELEASE") {
        exclude group: "org.apache.tomcat", module: "tomcat-embed-core"
        exclude group: "org.springframework", module: "spring-web"
        exclude group: "org.springframework", module: "spring-webmvc"
        exclude group: "org.yaml", module: "snakeyaml"
    }
    implementation "org.yaml:snakeyaml:1.26"
    implementation "org.springframework:spring-webmvc:5.2.15.RELEASE"
    implementation "org.springframework:spring-web:5.2.15.RELEASE"
    implementation "org.apache.tomcat.embed:tomcat-embed-core:9.0.43"
    implementation 'org.apache.qpid:qpid-jms-client:0.51.0'
    implementation("org.springframework:spring-jms:5.2.6.RELEASE") {
        exclude group: "org.apache.tomcat", module: "tomcat-embed-core"
        exclude group: "org.springframework", module: "spring-web"
        exclude group: "org.springframework", module: "spring-webmvc"
        exclude group: "org.yaml", module: "snakeyaml"
    }
    implementation("ca.uhn.hapi.fhir:hapi-fhir-structures-dstu3:5.4.2") {
        exclude group: "commons-codec", module: "commons-codec"
    }
    implementation "commons-codec:commons-codec:1.13"
    implementation "uk.nhs.connect.iucds:iucds-schema:3.0.RC1.2"
    implementation("org.springframework.boot:spring-boot-starter-actuator:2.3.1.RELEASE") {
        exclude group: "org.apache.tomcat", module: "tomcat-embed-core"
        exclude group: "org.springframework", module: "spring-web"
        exclude group: "org.springframework", module: "spring-webmvc"
        exclude group: "org.yaml", module: "snakeyaml"
    }
    implementation "org.dom4j:dom4j:2.1.3"
    implementation "jaxen:jaxen:1.2.0"
    implementation "org.apache.xmlbeans:xmlbeans:3.1.0"

    testImplementation "org.mockito:mockito-core:3.3.3"
    testImplementation "org.assertj:assertj-core:3.16.1"
    testImplementation("org.springframework.boot:spring-boot-starter-test:2.3.1.RELEASE") {
        exclude group: "org.apache.tomcat", module: "tomcat-embed-core"
        exclude group: "org.springframework", module: "spring-web"
        exclude group: "org.springframework", module: "spring-webmvc"
        exclude group: "org.yaml", module: "snakeyaml"
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }

    testImplementation "io.rest-assured:rest-assured:4.3.3"
    testImplementation "ca.uhn.hapi.fhir:hapi-fhir-validation-resources-dstu3:5.4.2"
    testImplementation "org.testcontainers:testcontainers:1.15.3"

    components {
        withModule('org.dom4j:dom4j', ClearDependencies)
    }
}

class ClearDependencies implements ComponentMetadataRule {
    void execute(ComponentMetadataContext context) {
        context.details.allVariants { withDependencies { clear() } }
    }
}

lombok {
    config['lombok.log.fieldName'] = 'LOGGER'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }

        resources {
            srcDir file('src/integration-test/resources')
        }
    }
}

configurations {
    integrationTestCompileOnly.extendsFrom testCompileOnly
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    useJUnitPlatform() {
        description = 'Runs integration tests.'
        group = 'verification'

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }
    }
    mustRunAfter(checkstyleMain)
    mustRunAfter(checkstyleTest)
    mustRunAfter(checkstyleIntegrationTest)
    mustRunAfter(spotbugsMain)
    mustRunAfter(spotbugsTest)
    mustRunAfter(spotbugsIntegrationTest)
}

task staticCodeAnalysis(type: GradleBuild) {
    tasks = [
            'clean',
            'checkstyleMain',
            'checkstyleTest',
            'checkstyleIntegrationTest',
            'spotbugsMain',
            'spotbugsTest',
            'spotbugsIntegrationTest',
    ]
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    excludeFilter = rootProject.file('config/spotbugs/exclude.xml')
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

integrationTest.mustRunAfter test
check.dependsOn integrationTest
