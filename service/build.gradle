plugins {
    id 'java'
    id 'org.springframework.boot' version '2.6.8'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id "io.freefair.lombok" version "6.4.2"
    id "checkstyle"
    id "com.github.spotbugs" version "4.7.9"
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'checkstyle'
apply plugin: "com.github.spotbugs"


repositories {
    mavenCentral()
    flatDir {
        dirs 'libs'
    }
}

dependencies {

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.apache.qpid:qpid-jms-client:1.5.0'
    implementation 'org.springframework:spring-jms'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-dstu3:5.7.2'
    implementation 'uk.nhs.connect.iucds:iucds-schema:3.0.RC1.2'
    implementation 'jaxen:jaxen:1.2.0'
    implementation 'org.apache.xmlbeans:xmlbeans:3.1.0'
    implementation 'com.rabbitmq.jms:rabbitmq-jms:2.3.0'

    testImplementation 'org.mockito:mockito-core:4.4.0'
    testImplementation 'org.assertj:assertj-core:3.22.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.rest-assured:rest-assured:5.0.1'
    testImplementation 'io.rest-assured:json-path:5.0.1'
    testImplementation 'io.rest-assured:xml-path:5.0.1'
    testImplementation 'ca.uhn.hapi.fhir:hapi-fhir-validation-resources-dstu3:5.7.2'
    testImplementation 'pl.pragmatists:JUnitParams:1.1.1'
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integration-test/java')
        }

        resources {
            srcDir file('src/integration-test/resources')
        }
    }
}

configurations {
    integrationTestCompileOnly.extendsFrom testCompileOnly
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntime.extendsFrom testRuntime
    integrationTestAnnotationProcessor.extendsFrom testAnnotationProcessor
}

test {
    useJUnitPlatform()
}

task integrationTest(type: Test) {
    useJUnitPlatform() {
        description = 'Runs integration tests.'
        group = 'verification'

        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }
    }
    mustRunAfter(checkstyleMain)
    mustRunAfter(checkstyleTest)
    mustRunAfter(checkstyleIntegrationTest)
    mustRunAfter(spotbugsMain)
    mustRunAfter(spotbugsTest)
    mustRunAfter(spotbugsIntegrationTest)
}

task staticCodeAnalysis(type: GradleBuild) {
    tasks = [
            'clean',
            'checkstyleMain',
            'checkstyleTest',
            'checkstyleIntegrationTest',
            'spotbugsMain',
            'spotbugsTest',
            'spotbugsIntegrationTest',
    ]
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) {
    excludeFilter = rootProject.file('config/spotbugs/exclude.xml')
    reports {
        xml.enabled = true
        html.enabled = false
    }
}

integrationTest.mustRunAfter test
check.dependsOn integrationTest
